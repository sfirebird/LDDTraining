#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/of.h>
#include <linux/gpio/consumer.h>
#include <linux/platform_device.h>
#include <linux/fs.h>

static struct gpio_desc *gpio_out;
static struct gpio_desc *gpio_in;

static int my_gpio_probe(struct platform_device *pdev) {
    struct device *dev = &pdev->dev;

    // Get GPIOs from the Device Tree
    gpio_out = devm_gpiod_get(dev, "gpio_out", GPIOD_OUT_LOW);
    if (IS_ERR(gpio_out)) {
        dev_err(dev, "Failed to get gpio_out\n");
        return PTR_ERR(gpio_out);
    }

    gpio_in = devm_gpiod_get(dev, "gpio_in", GPIOD_IN);
    if (IS_ERR(gpio_in)) {
        dev_err(dev, "Failed to get gpio_in\n");
        return PTR_ERR(gpio_in);
    }

    dev_info(dev, "GPIO driver probed successfully\n");
    return 0;
}

static int my_gpio_remove(struct platform_device *pdev) {
    dev_info(&pdev->dev, "GPIO driver removed\n");
    return 0;
}

static const struct of_device_id my_gpio_of_match[] = {
    { .compatible = "my,gpio-driver", },
    { /* sentinel */ }
};
MODULE_DEVICE_TABLE(of, my_gpio_of_match);

static struct platform_driver my_gpio_driver = {
    .probe = my_gpio_probe,
    .remove = my_gpio_remove,
    .driver = {
        .name = "my_gpio_driver",
        .of_match_table = my_gpio_of_match,
    },
};

module_platform_driver(my_gpio_driver);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("GPIO Driver using Device Tree");
